<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutenticacaoEmail" xml:space="preserve">
    <value>E-mail não existe ou senha é inválida</value>
  </data>
  <data name="AutenticacaoLogin" xml:space="preserve">
    <value>Usuário ou senha inválida</value>
  </data>
  <data name="BairroNomeNulo" xml:space="preserve">
    <value>Nome do bairro deve ser informado</value>
  </data>
  <data name="BairroNulo" xml:space="preserve">
    <value>Endereço incompleto: bairro faltando</value>
  </data>
  <data name="CategoriaNomeNulo" xml:space="preserve">
    <value>Nome da categoria deve ser informado</value>
  </data>
  <data name="CidadeNulo" xml:space="preserve">
    <value>Endereço incompleto: cidade faltando</value>
  </data>
  <data name="DescricaoNula" xml:space="preserve">
    <value>A descrição é obrigatória</value>
  </data>
  <data name="EnderecoNumeroNulo" xml:space="preserve">
    <value>Endereço incompleto: preencha o número</value>
  </data>
  <data name="EstadoNulo" xml:space="preserve">
    <value>Endereço incompleto: estado faltando</value>
  </data>
  <data name="LogradouroNulo" xml:space="preserve">
    <value>Endereço incompleto: preencha o logradouro</value>
  </data>
  <data name="LojaJaExiste" xml:space="preserve">
    <value>Esta loja já existe</value>
  </data>
  <data name="LojaNomeNulo" xml:space="preserve">
    <value>Nome da loja deve ser informado</value>
  </data>
  <data name="LojaSalvarInvalido" xml:space="preserve">
    <value>A loja não pode ser salva sem uma associação com algum usuário</value>
  </data>
  <data name="PrecoNulo" xml:space="preserve">
    <value>O preço deve ser informado</value>
  </data>
  <data name="ProdutoDescricaoNulo" xml:space="preserve">
    <value>A descrição do produto é obrigatória</value>
  </data>
  <data name="ProdutoNulo" xml:space="preserve">
    <value>O produto é obrigatório</value>
  </data>
  <data name="UnidadeEntradaNulo" xml:space="preserve">
    <value>A unidade de entrada é obrigatória</value>
  </data>
  <data name="UnidadeSaidaNulo" xml:space="preserve">
    <value>A unidade de saída é obrigatória</value>
  </data>
  <data name="UsuarioLoginNulo" xml:space="preserve">
    <value>Login do usuário deve ser informado</value>
  </data>
  <data name="UsuarioNaoEncontrado" xml:space="preserve">
    <value>Usuário {0} não encontrado</value>
  </data>
  <data name="ValorMaiorZero" xml:space="preserve">
    <value>O valor deve ser maior que zero</value>
  </data>
  <data name="LojaNula" xml:space="preserve">
    <value>A Loja não pode ser nula</value>
  </data>
  <data name="LojaInvalida" xml:space="preserve">
    <value>Loja inválida: atributos obrigatórios têm valor nulo</value>
  </data>
  <data name="ProdutoMesmaLoja" xml:space="preserve">
    <value>O produto já pertence a essa loja</value>
  </data>
  <data name="ProdutoPaiNulo" xml:space="preserve">
    <value>O produto é obrigatório em ProdutoVendedor</value>
  </data>
  <data name="ProdutoExiste" xml:space="preserve">
    <value>O produto já existe</value>
  </data>
  <data name="ProdutoAtributosRepetidos" xml:space="preserve">
    <value>Existem atributos repetidos para este produto</value>
  </data>
  <data name="ProdutoFabricanteNulo" xml:space="preserve">
    <value>O fabricante é obrigatório</value>
  </data>
  <data name="DescricaoUnidadeMedidaNula" xml:space="preserve">
    <value>A descrição da unidade de medida é obrigatória</value>
  </data>
  <data name="SiglaUnidadeMedidaNula" xml:space="preserve">
    <value>A sigla da unidade de medida é obrigatória</value>
  </data>
  <data name="ProdutoPrecoInvalido" xml:space="preserve">
    <value>O preço deve ser maior que zero</value>
  </data>
  <data name="BairroJaExiste" xml:space="preserve">
    <value>Bairro já existe</value>
  </data>
  <data name="CidadeJaExiste" xml:space="preserve">
    <value>Cidade já existe</value>
  </data>
  <data name="CidadeNomeNulo" xml:space="preserve">
    <value>Nome da cidade deve ser informado</value>
  </data>
  <data name="EstadoJaExiste" xml:space="preserve">
    <value>Estado já existe</value>
  </data>
  <data name="EstadoNomeNulo" xml:space="preserve">
    <value>O Estado deve ter um nome</value>
  </data>
  <data name="EstadoSiglaNula" xml:space="preserve">
    <value>O Estado deve ter uma sigla</value>
  </data>
  <data name="EnderecoJaExiste" xml:space="preserve">
    <value>O endereço já existe</value>
  </data>
  <data name="HaEnderecosRepetidos" xml:space="preserve">
    <value>Há endereços repetidos: {0}</value>
  </data>
  <data name="EnderecoRepetidoLoja" xml:space="preserve">
    <value>A loja já possui este endereço</value>
  </data>
  <data name="LojasListaUsuariosVazia" xml:space="preserve">
    <value>A lista de usuários não pode ser nula ou vazia</value>
  </data>
  <data name="UsuarioLogNulo" xml:space="preserve">
    <value>Usuário de Log não pode ser nulo </value>
  </data>
  <data name="EnderecoAtualizarNaoTransiente" xml:space="preserve">
    <value>O endereço não pode ser transiente na atualização</value>
  </data>
  <data name="EnderecoSalvarTransiente" xml:space="preserve">
    <value>O endereço deve ser transiente na inclusão</value>
  </data>
  <data name="UmUsuarioAoMenos" xml:space="preserve">
    <value>Deve haver ao menos um usuário associado a uma nova loja</value>
  </data>
  <data name="NaoExisteImagem" xml:space="preserve">
    <value>Favor incluir uma imagem</value>
  </data>
  <data name="VariasImagensSelecionadas" xml:space="preserve">
    <value>Favor selecione somente uma imagem</value>
  </data>
</root>